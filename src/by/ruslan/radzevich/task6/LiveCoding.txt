///////////
// core
///////////

// Превратить List<List<String>> приходящий на вход в строку, где каждая подстрока разделена запятой и пробелом (S4, S5, S6...).

List<List<String>> listOflists = List.of(List.of("S4", "S5", "S6"),
List.of("S4", "S5", "S6"),
List.of("S7", "S8", "S9"));

  listOflists.stream().flatMap(el->el.strem())
  .collect(Collector.joining(", "))

//////////////

// На вход приходит номер телефона который начинается с +.
// Необходимо маскировать цифры в номере, чтобы номер принял следующий вид: +NN**..**NN.
// Количество звездочек должно соответствовать количеству замаскированных символов.

public static void main(String[] args) {
 String phone = "+79113456673";
 public static String maskPhoneNumber(String phone) {
     if (phone == null || !phone.matches("^\\+\\d{4,}$")) {
         throw new IllegalArgumentException("Неверный формат номера.");
     }

     // Заменяем всё между двумя крайними группами цифр на звездочки
     return phone.replaceAll("^(\\+\\d{2})(\\d+)(\\d{2})$",
                                -> m.group(1) + "*".repeat(m.group(2).length()) + m.group(3));
 }


}

///////////////

// Задача: найти второй максимально большой элемент в массиве.

public static void main(String[] args) {
    System.out.println(getSecondMaxElement(new int[] {33, 41, 11, 44, 4, 2, 6, 7, 8 ,9, 10}));

public static int getSecondMaxElement(int[] nums) {
    if (nums == null || nums.length < 2) {
        throw new IllegalArgumentException("Массив должен содержать минимум два элемента.");
    }

    int max = Integer.MIN_VALUE;
    int secondMax = Integer.MIN_VALUE;

    for (int num : nums) {
        if (num > max) {
            secondMax = max;
            max = num;
        } else if (num > secondMax && num < max) {
            secondMax = num;
        }
    }

    return secondMax;
}
}

////////////

// На вход приходит список списков зашифрованный строк, известно что в каждой зашифрованное строке находится 1 слово.
// Необходимо расшифровать полученные данные и собрать их все в 1 строку, разделенную пробелами.

public static void main(String[] args) {

List<List<String>> lists = List.of(
  List.of("SGUxMTExbC0tMGxvMjEyMy4uLi8v", "dzBvcjFsZA=="),
  List.of("aW4=", "dGgxMTExMjMyaXM="),
  List.of("YmVhdXQxMjNpZjMxMnVs", "ZGF5"));
}

        String result = lists.stream()
            .flatMap(List::stream) // объединяем все строки в единый поток
            .map(Decoder::decodeBase64) // декодируем каждую строку
            .collect(Collectors.joining(" ")); // объединяем с пробелами

        System.out.println(result);
    }

    private static String decodeBase64(String encoded) {
        return new String(Base64.getDecoder().decode(encoded));
    }
}

//////////////

// Отсортировать массив таким образом, чтобы все нечетные элементы остались на своих местах, а четные были отсортированы по возрастанию.

List<Integer> list = new ArrayList<>(Arrays.asList(3, 4, 1, 5, 2));
public class SortEvenPreservingOdds {
    public static void main(String[] args) {
        List<Integer> list = new ArrayList<>(Arrays.asList(3, 4, 1, 5, 2));

        // Получаем отсортированные чётные числа
        List<Integer> sortedEvens = list.stream()
            .filter(n -> n % 2 == 0)
            .sorted()
            .collect(Collectors.toList());

        // Индекс для отслеживания позиции в списке sortedEvens
        Iterator<Integer> evenIterator = sortedEvens.iterator();

        // Заменяем чётные числа в исходном списке отсортированными
        List<Integer> result = list.stream()
            .map(n -> n % 2 == 0 ? evenIterator.next() : n)
            .collect(Collectors.toList());

        System.out.println(result); // [3, 2, 1, 5, 4]
    }
}

//////////////

/**Необходимо реализовать метод, который будет возвращать итоговую сумму списания с банковского счета
 * с учетом комиссии за перевод средств.
 * Необходимо избегать конструкции выбора (if-else, switch-case, filter и т.д.).
 * Известно что на вход приходят валидные данные. Сумма не может быть меньше 0, но может быть 0.
 *
 * Комиссии за суммы:
 * < 1_000р - 0%
 * 1_000р - 1%
 * 10_000р - 2%
 * 100_000р - 5%
 * 1_000_000р - 7%
 */
public class FeeCalculator {
    private static final NavigableMap<Integer, Double> feeMap = new TreeMap<>();

    static {
        // Порог -> процент комиссии
        feeMap.put(1_000, 0.01);
        feeMap.put(10_000, 0.02);
        feeMap.put(100_000, 0.05);
        feeMap.put(1_000_000, 0.07);
    }

    public static double calculateTotalAmount(double amount) {
        Double fee = Optional.ofNullable(feeMap.floorEntry((int) amount))
                             .map(Map.Entry::getValue)
                             .orElse(0.0);

        return amount + amount * fee;
    }

    public static void main(String[] args) {
        System.out.println(calculateTotalAmount(999));       // 999.0
        System.out.println(calculateTotalAmount(1000));      // 1010.0
        System.out.println(calculateTotalAmount(999_999));   // 1_049_998.95
        System.out.println(calculateTotalAmount(1_000_000)); // 1_070_000.0
    }
}
///////////
// SQL
///////////

// Сформировать отчет в котором будет количество записей в указанных таблицах и строка с указанием из какой таблицы получены данные.

Cards(id, number)

Clients(id. name)

Accounts(id, number)

SELECT COUNT(*) AS total, 'Cards' AS source FROM Cards
UNION ALL
SELECT COUNT(*) AS total, 'Clients' AS source FROM Clients
UNION ALL
SELECT COUNT(*) AS total, 'Accounts' AS source FROM Accounts;


/////////////

// Сформировать список имен клиентов, у которых на данный момент меньше 5 счетов при помощи 1 запроса.

Clients(id, name)

Accounts(id, number, client_id)
Select client.name, COUNT(Accounts.number) as countNumber
from Clients
inner join Accounts on
Clients.id = Accounts.client_id
Group by clients.name
having countNumber < 5;


/////////////
// Multithread
/////////////

// Назвать предполагаемый вывод в консоль.

public static void main(String[] args) {
    Thread thread = new ThreadCustom("ThreadCustom");

    thread.start();
    thread.run();
    thread.run();
    thread.run();
    thread.run();
    thread.run();
}

public class ThreadCustom extends Thread {

  public ThreadCustom(String name) {
    super(name);
  }

  @Override
  public void run() {
    System.out.println(Thread.currentThread().getName());
  }
}