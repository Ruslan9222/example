package by.ruslan.radzevich.task6;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

public class LiveCoding {
    public static void main(String[] args) {

//        —Å–∞–º—É—é —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â—É—é—Å—è –±—É–∫–≤—É –≤–æ –≤—Å–µ—Ö —Å–ª–æ–≤–∞—Ö.
//üìé –ü–æ–¥—Å–∫–∞–∑–∫–∞:
//        –ò—Å–ø–æ–ª—å–∑—É–π flatMap, split(""), Collectors.groupingBy + counting()
//        –ü–æ—Ç–æ–º –Ω–∞–π–¥–∏ –º–∞–∫—Å–∏–º—É–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
        String[] words = {"apple", "banana", "grape", "avocado"};

        Optional<Map.Entry<String, Long>> mostFrequent = Arrays.stream(words)
                .flatMap(word -> Arrays.stream(word.split("")))
                .collect(Collectors.groupingBy(ch -> ch, Collectors.counting()))
                .entrySet().stream()
                .max(Map.Entry.comparingByValue());

        mostFrequent.ifPresent(entry ->
                System.out.println("–°–∞–º–∞—è —á–∞—Å—Ç–∞—è –±—É–∫–≤–∞: " + entry.getKey() + " ‚Äî " + entry.getValue() + " —Ä–∞–∑")
        );


    //        –í–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª (int), —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ "b", –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é.
    List<String> strings = List.of("a1", "b2", "c3", "a4", "b5");
    List<String> b = strings.stream()
            .filter(el -> el.startsWith("b"))
            .sorted((el1, el2) -> el2.compareTo(el1))
//                .forEach(el-> System.out.println("el = " + el));
            .toList();
        System.out.println("strings = "+b);


    record User(String name, String city, int age) {
    }

    List<User> users = List.of(
            new User("Alice", "London", 30),
            new User("Bob", "Paris", 25),
            new User("Charlie", "London", 35),
            new User("Diana", "Paris", 28),
            new User("Eve", "Berlin", 22)
    );

//        Map<String, List<User>>, –≥–¥–µ –∫–ª—é—á ‚Äî –≥–æ—Ä–æ–¥, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
//        Map<String, List<String>> ‚Äî –≤ –∫–∞–∂–¥–æ–º –≥–æ—Ä–æ–¥–µ —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω.
//                Map<String, Double> ‚Äî —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ –∫–∞–∂–¥–æ–º—É –≥–æ—Ä–æ–¥—É.
//                –≤–æ—Ç —ç—Ç–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å
//        Map<String, List<User>> user1 = users.stream()
////                .filter(el2->!el2.city.equals("London"))
//                .sorted((el,el1)->el.name().compareTo(el1.name()))
//                .collect(Collectors.groupingBy(el->el.city()));
//        System.out.print(user1);
//        Map<String, List<String>> user2 = users.stream()
//                .collect(Collectors.groupingBy(el -> el.city(), Collectors
//                        .mapping(el2 -> el2.name(), Collectors.toList())));
//        System.out.println("user = " + user2);
//       Map<String, Double> user = users.stream()
//                .collect(Collectors.groupingBy(el->el.city(), Collectors
//                        .averagingDouble(el2-> el2.age())));
//        System.out.println(user);
}

record User(String name, String city, int age) {
}

List<User> users = List.of(
        new User("Alice", "London", 30),
        new User("Bob", "Paris", 25),
        new User("Charlie", "London", 35),
        new User("Diana", "Paris", 28),
        new User("Eve", "Berlin", 22)
);
}
